/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/comments/{id}/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 커멘트 비밀번호 검증
         * @description 커멘트의 비밀번호를 검증합니다.
         */
        post: operations["verifyPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 주간 날씨 조회
         * @description 위도와 경도를 이용하여 주간 날씨 정보를 조회합니다.
         */
        get: operations["getWeeklyWeather"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 날짜 날씨 조회
         * @description 위도와 경도를 이용하여 특정 날짜의 날씨 정보를 조회합니다.
         */
        get: operations["getWeatherByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 위치별 날씨 조회
         * @description 지명과 위도와 경도를 이용하여 해당 위치의 날씨 정보를 조회합니다.
         */
        get: operations["getWeatherByLocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/geos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 도시 이름으로 지역 정보 조회
         * @description 도시 이름에 해당하는 지역 정보를 반환합니다.
         */
        get: operations["getGeoLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커멘트 다건 조회
         * @description 필터링된 커멘트 목록을 조회합니다.
         */
        get: operations["getComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커멘트 단건 조회
         * @description ID로 커멘트를 조회합니다.
         */
        get: operations["getComment"];
        put?: never;
        post?: never;
        /**
         * 커멘트 삭제
         * @description 커멘트를 삭제합니다.
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cloth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOutfitWithPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cloth/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 날씨 기반 옷 정보 조회
         * @description 위도와 경도를 이용하여 날씨 정보를 조회하고, 해당 날씨에 적합한 옷 정보를 반환합니다.
         */
        get: operations["getClothDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        verifyPasswordReqBody: {
            password?: string;
        };
        RsDataBoolean: {
            resultCode?: string;
            msg?: string;
            data?: boolean;
        };
        WeatherInfoDto: {
            /** Format: int32 */
            id: number;
            weather: string;
            /** Format: int32 */
            weatherCode?: number;
            weatherDescription?: string;
            /** Format: double */
            dailyTemperatureGap: number;
            /** Format: double */
            feelsLikeTemperature: number;
            /** Format: double */
            maxTemperature: number;
            /** Format: double */
            minTemperature: number;
            /** Format: double */
            pop?: number;
            /** Format: double */
            rain?: number;
            /** Format: double */
            snow?: number;
            /** Format: int32 */
            humidity?: number;
            /** Format: double */
            windSpeed?: number;
            /** Format: int32 */
            windDeg?: number;
            /** Format: double */
            uvi?: number;
            location: string;
            /** Format: date */
            date: string;
        };
        GeoLocationDto: {
            name: string;
            country: string;
            /** Format: double */
            lat: number;
            /** Format: double */
            lon: number;
            localName?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        CommentDto: {
            /** Format: int32 */
            id: number;
            email: string;
            imageUrl?: string;
            title: string;
            sentence: string;
            tagString: string;
            weatherInfoDto: components["schemas"]["WeatherInfoDto"];
        };
        PageCommentDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["CommentDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            paged?: boolean;
            unpaged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        TripSchedule: {
            /** Format: date */
            start?: string;
            /** Format: date */
            end?: string;
            /** Format: double */
            lat?: number;
            /** Format: double */
            lon?: number;
        };
        Clothing: unknown;
        OutfitResponse: {
            clothes?: {
                [key: string]: components["schemas"]["Clothing"][];
            };
            extraClothes?: {
                [key: string]: components["schemas"]["Clothing"][];
            };
        };
        CategoryClothDto: {
            clothName?: string;
            imageUrl?: string;
            /** @enum {string} */
            category?: "CASUAL_DAILY" | "FORMAL_OFFICE" | "OUTDOOR" | "DATE_LOOK" | "EXTRA";
        };
        ExtraClothDto: {
            /** Format: int32 */
            id?: number;
            clothName?: string;
            imageUrl?: string;
            /** @enum {string} */
            weather?: "THUNDERSTORM_LIGHT_RAIN" | "THUNDERSTORM_RAIN" | "THUNDERSTORM_HEAVY_RAIN" | "LIGHT_THUNDERSTORM" | "THUNDERSTORM" | "HEAVY_THUNDERSTORM" | "RAGGED_THUNDERSTORM" | "THUNDERSTORM_LIGHT_DRIZZLE" | "THUNDERSTORM_DRIZZLE" | "THUNDERSTORM_HEAVY_DRIZZLE" | "LIGHT_DRIZZLE" | "DRIZZLE" | "HEAVY_DRIZZLE" | "LIGHT_DRIZZLE_RAIN" | "DRIZZLE_RAIN" | "HEAVY_DRIZZLE_RAIN" | "SHOWER_RAIN_AND_DRIZZLE" | "HEAVY_SHOWER_RAIN_AND_DRIZZLE" | "SHOWER_DRIZZLE" | "LIGHT_RAIN" | "MODERATE_RAIN" | "HEAVY_RAIN" | "VERY_HEAVY_RAIN" | "EXTREME_RAIN" | "FREEZING_RAIN" | "LIGHT_SHOWER_RAIN" | "SHOWER_RAIN" | "HEAVY_SHOWER_RAIN" | "RAGGED_SHOWER_RAIN" | "LIGHT_SNOW" | "SNOW" | "HEAVY_SNOW" | "SLEET" | "LIGHT_SHOWER_SLEET" | "SHOWER_SLEET" | "LIGHT_RAIN_AND_SNOW" | "RAIN_AND_SNOW" | "LIGHT_SHOWER_SNOW" | "SHOWER_SNOW" | "HEAVY_SHOWER_SNOW" | "MIST" | "SMOKE" | "HAZE" | "SAND_DUST_WHIRLS" | "FOG" | "SAND" | "DUST" | "VOLCANIC_ASH" | "SQUALLS" | "TORNADO" | "CLEAR_SKY" | "FEW_CLOUDS" | "SCATTERED_CLOUDS" | "BROKEN_CLOUDS" | "OVERCAST_CLOUDS" | "HEAT_WAVE";
        };
        WeatherClothResponseDto: {
            weatherInfo?: components["schemas"]["WeatherInfoDto"];
            clothList?: components["schemas"]["CategoryClothDto"][];
            extraCloth?: components["schemas"]["ExtraClothDto"][];
        };
        RsDataCommentDto: {
            resultCode?: string;
            msg?: string;
            data?: components["schemas"]["CommentDto"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    verifyPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["verifyPasswordReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataBoolean"];
                };
            };
        };
    };
    getWeeklyWeather: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"][];
                };
            };
        };
    };
    getWeatherByDate: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path: {
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"];
                };
            };
        };
    };
    getWeatherByLocation: {
        parameters: {
            query: {
                location: string;
                lat: number;
                lon: number;
                start: string;
                end: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"][];
                };
            };
        };
    };
    getGeoLocations: {
        parameters: {
            query: {
                location: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GeoLocationDto"][];
                };
            };
        };
    };
    getComments: {
        parameters: {
            query: {
                location?: string;
                date?: string;
                feelsLikeTemperature?: number;
                month?: number;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageCommentDto"];
                };
            };
        };
    };
    getComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CommentDto"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataCommentDto"];
                };
            };
        };
    };
    getOutfitWithPeriod: {
        parameters: {
            query: {
                tripSchedule: components["schemas"]["TripSchedule"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OutfitResponse"];
                };
            };
        };
    };
    getClothDetails: {
        parameters: {
            query: {
                /**
                 * @description 위도
                 * @example 37.5
                 */
                latitude: number;
                /**
                 * @description 경도
                 * @example 127
                 */
                longitude: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherClothResponseDto"];
                };
            };
        };
    };
}
