/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/reviews/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 리뷰 단건 조회
         * @description ID로 리뷰를 조회합니다.
         */
        get: operations["getReview"];
        /**
         * 리뷰 수정
         * @description 리뷰를 수정합니다.
         */
        put: operations["modifyReview"];
        post?: never;
        /**
         * 리뷰 삭제
         * @description 리뷰를 삭제합니다.
         */
        delete: operations["deleteReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 리뷰 다건 조회
         * @description 필터링된 리뷰 목록을 조회합니다.
         */
        get: operations["getReviews"];
        put?: never;
        /**
         * 리뷰 작성
         * @description 새로운 리뷰를 작성합니다.
         */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{id}/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 리뷰 비밀번호 검증
         * @description 리뷰의 비밀번호를 검증합니다.
         */
        post: operations["verifyPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 주간 날씨 조회
         * @description 위도와 경도를 이용하여 주간 날씨 정보를 조회합니다.
         */
        get: operations["getWeeklyWeather"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 날짜 날씨 조회
         * @description 위도와 경도를 이용하여 특정 날짜의 날씨 정보를 조회합니다.
         */
        get: operations["getWeatherByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 위치별 날씨 조회
         * @description 지명과 위도와 경도를 이용하여 해당 위치의 날씨 정보를 조회합니다.
         */
        get: operations["getWeatherByLocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 정보 조회 */
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/geos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 도시 이름으로 지역 정보 조회
         * @description 도시 이름에 해당하는 지역 정보를 반환합니다.
         */
        get: operations["getGeoLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cloth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 기간별 옷차림 조회
         * @description 시작일과 종료일을 이용하여 해당 기간 동안의 날씨에 적합한 옷차림 정보를 반환합니다.
         */
        get: operations["getOutfitWithPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cloth/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 날씨 기반 옷 정보 조회
         * @description 위도와 경도를 이용하여 날씨 정보를 조회하고, 해당 날씨에 적합한 옷 정보를 반환합니다.
         */
        get: operations["getClothDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 로그아웃 */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ClothItemReqBody: {
            /** @enum {string} */
            clothName: "T_SHIRT" | "SWEATSHIRT" | "HOODIE" | "SHIRT" | "DRESS_SHIRT" | "BLOUSE" | "SWEATER" | "CARDIGAN" | "COAT" | "JACKET" | "LEATHER_JACKET" | "DENIM_JACKET" | "BLAZER" | "PADDING" | "VEST" | "WINDBREAKER" | "FUNCTIONAL_T_SHIRT" | "JEANS" | "SLACKS" | "SHORTS" | "SKIRT" | "JOGGER_PANTS" | "TRACK_PANTS" | "LEGGINGS" | "CARGO_PANTS" | "CORDUROY_PANTS" | "CHINOS" | "SKI_PANTS" | "SNEAKERS" | "ATHLETIC_SHOES" | "FLATS" | "HEELS" | "LOAFERS" | "SLIPPERS" | "LEATHER_BOOTS" | "FUR_BOOTS" | "RAIN_BOOTS" | "SANDALS" | "OXFORDS" | "HIKING_SHOES" | "ANKLE_BOOTS" | "HAT" | "CAP" | "BEANIE" | "SCARF" | "GLOVES" | "BELT" | "BAG" | "BACKPACK" | "CROSSBODY_BAG" | "SUNGLASSES" | "UMBRELLA" | "MASK";
            /** @enum {string} */
            category: "TOP" | "BOTTOM" | "SHOES" | "EXTRA";
            /** @enum {string} */
            style?: "CASUAL_DAILY" | "FORMAL_OFFICE" | "OUTDOOR" | "DATE_LOOK" | "EXTRA";
            /** @enum {string} */
            material?: "COTTON" | "POLYESTER" | "WOOL" | "LINEN" | "NYLON" | "DENIM" | "LEATHER" | "FLEECE" | "SILK" | "CASHMERE" | "CORDUROY";
            isRecommend: boolean;
        };
        ModifyReviewReqBody: {
            title: string;
            sentence: string;
            tagString?: string;
            imageUrl?: string;
            countryCode: string;
            cityName: string;
            /** Format: date */
            date: string;
            clothList?: components["schemas"]["ClothItemReqBody"][];
        };
        ReviewDto: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            memberId?: number;
            email?: string;
            imageUrl?: string;
            title: string;
            weatherInfoDto: components["schemas"]["WeatherInfoDto"];
        };
        RsDataReviewDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["ReviewDto"];
        };
        WeatherInfoDto: {
            /** Format: int32 */
            id?: number;
            weather: string;
            /** Format: int32 */
            weatherCode: number;
            weatherDescription?: string;
            /** Format: double */
            dailyTemperatureGap: number;
            /** Format: double */
            feelsLikeTemperature: number;
            /** Format: double */
            maxTemperature: number;
            /** Format: double */
            minTemperature: number;
            /** Format: double */
            pop?: number;
            /** Format: double */
            rain?: number;
            /** Format: double */
            snow?: number;
            /** Format: int32 */
            humidity?: number;
            /** Format: double */
            windSpeed?: number;
            /** Format: int32 */
            windDeg?: number;
            /** Format: double */
            uvi?: number;
            location: string;
            /** Format: date */
            date: string;
        };
        CreateReviewReqBody: {
            email?: string;
            password?: string;
            title: string;
            sentence: string;
            tagString?: string;
            imageUrl?: string;
            countryCode: string;
            cityName: string;
            /** Format: date */
            date: string;
            clothList?: components["schemas"]["ClothItemReqBody"][];
        };
        VerifyPasswordReqBody: {
            password: string;
        };
        RsDataBoolean: {
            resultCode: string;
            msg: string;
            data: boolean;
        };
        MemberJoinReqBody: {
            userId: string;
            password: string;
            email: string;
            /** Format: int32 */
            age: number;
            /** @enum {string} */
            gender: "MALE" | "FEMALE";
            /** @enum {string} */
            tendency: "COLD_SENSITIVE" | "NEUTRAL" | "HEAT_SENSITIVE";
        };
        MemberDto: {
            /** Format: int32 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            userId: string;
        };
        RsDataMemberDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MemberDto"];
        };
        MemberLoginReqBody: {
            username: string;
            password: string;
        };
        MemberLoginResBody: {
            accessToken: string;
            apiKey: string;
            memberDto: components["schemas"]["MemberDto"];
        };
        RsDataMemberLoginResBody: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MemberLoginResBody"];
        };
        PageDtoReviewDto: {
            content: components["schemas"]["ReviewDto"][];
            pageable: components["schemas"]["PageableDto"];
        };
        PageableDto: {
            /** Format: int32 */
            currentPageNumber: number;
            /** Format: int32 */
            pageSize: number;
            /** Format: int32 */
            totalPages: number;
            /** Format: int64 */
            totalElements: number;
            /** Format: int32 */
            numberOfElements: number;
            /** Format: int64 */
            offset: number;
            isSorted: boolean;
        };
        CategoryClothDto: {
            /** @enum {string} */
            clothName: "T_SHIRT" | "SWEATSHIRT" | "HOODIE" | "SHIRT" | "DRESS_SHIRT" | "BLOUSE" | "SWEATER" | "CARDIGAN" | "COAT" | "JACKET" | "LEATHER_JACKET" | "DENIM_JACKET" | "BLAZER" | "PADDING" | "VEST" | "WINDBREAKER" | "FUNCTIONAL_T_SHIRT" | "JEANS" | "SLACKS" | "SHORTS" | "SKIRT" | "JOGGER_PANTS" | "TRACK_PANTS" | "LEGGINGS" | "CARGO_PANTS" | "CORDUROY_PANTS" | "CHINOS" | "SKI_PANTS" | "SNEAKERS" | "ATHLETIC_SHOES" | "FLATS" | "HEELS" | "LOAFERS" | "SLIPPERS" | "LEATHER_BOOTS" | "FUR_BOOTS" | "RAIN_BOOTS" | "SANDALS" | "OXFORDS" | "HIKING_SHOES" | "ANKLE_BOOTS" | "HAT" | "CAP" | "BEANIE" | "SCARF" | "GLOVES" | "BELT" | "BAG" | "BACKPACK" | "CROSSBODY_BAG" | "SUNGLASSES" | "UMBRELLA" | "MASK";
            imageUrl: string;
            /** @enum {string} */
            category: "TOP" | "BOTTOM" | "SHOES" | "EXTRA";
            /** @enum {string} */
            style?: "CASUAL_DAILY" | "FORMAL_OFFICE" | "OUTDOOR" | "DATE_LOOK" | "EXTRA";
            /** @enum {string} */
            material?: "COTTON" | "POLYESTER" | "WOOL" | "LINEN" | "NYLON" | "DENIM" | "LEATHER" | "FLEECE" | "SILK" | "CASHMERE" | "CORDUROY";
        };
        ReviewDetailDto: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            memberId?: number;
            email?: string;
            imageUrl?: string;
            title: string;
            sentence: string;
            tagString?: string;
            weatherInfoDto: components["schemas"]["WeatherInfoDto"];
            recommendedClothList: components["schemas"]["CategoryClothDto"][];
            nonRecommendedClothList: components["schemas"]["CategoryClothDto"][];
        };
        MemberWithUserIdDto: {
            /** Format: int32 */
            id?: number;
            userId: string;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
            email: string;
            /** Format: int32 */
            age: number;
            /** @enum {string} */
            gender: "MALE" | "FEMALE";
            /** @enum {string} */
            tendency: "COLD_SENSITIVE" | "NEUTRAL" | "HEAT_SENSITIVE";
        };
        GeoLocationDto: {
            name?: string;
            country?: string;
            /** Format: double */
            lat: number;
            /** Format: double */
            lon: number;
            localName?: string;
        };
        ClothInfo: {
            /** @enum {string} */
            clothName: "T_SHIRT" | "SWEATSHIRT" | "HOODIE" | "SHIRT" | "DRESS_SHIRT" | "BLOUSE" | "SWEATER" | "CARDIGAN" | "COAT" | "JACKET" | "LEATHER_JACKET" | "DENIM_JACKET" | "BLAZER" | "PADDING" | "VEST" | "WINDBREAKER" | "FUNCTIONAL_T_SHIRT" | "JEANS" | "SLACKS" | "SHORTS" | "SKIRT" | "JOGGER_PANTS" | "TRACK_PANTS" | "LEGGINGS" | "CARGO_PANTS" | "CORDUROY_PANTS" | "CHINOS" | "SKI_PANTS" | "SNEAKERS" | "ATHLETIC_SHOES" | "FLATS" | "HEELS" | "LOAFERS" | "SLIPPERS" | "LEATHER_BOOTS" | "FUR_BOOTS" | "RAIN_BOOTS" | "SANDALS" | "OXFORDS" | "HIKING_SHOES" | "ANKLE_BOOTS" | "HAT" | "CAP" | "BEANIE" | "SCARF" | "GLOVES" | "BELT" | "BAG" | "BACKPACK" | "CROSSBODY_BAG" | "SUNGLASSES" | "UMBRELLA" | "MASK";
            imageUrl: string;
            /** @enum {string} */
            category: "TOP" | "BOTTOM" | "SHOES" | "EXTRA";
            /** @enum {string} */
            style?: "CASUAL_DAILY" | "FORMAL_OFFICE" | "OUTDOOR" | "DATE_LOOK" | "EXTRA";
            /** @enum {string} */
            material?: "COTTON" | "POLYESTER" | "WOOL" | "LINEN" | "NYLON" | "DENIM" | "LEATHER" | "FLEECE" | "SILK" | "CASHMERE" | "CORDUROY";
            /** Format: double */
            maxFeelsLike?: number;
            /** Format: double */
            minFeelsLike?: number;
            /** Format: int32 */
            id: number;
            /** Format: date-time */
            createDate: string;
            /** Format: date-time */
            modifyDate: string;
        };
        OutfitRecommendationResponseDto: {
            recommendedOutfits: {
                [key: string]: components["schemas"]["ClothInfo"][];
            };
            notRecommendedOutfits: {
                [key: string]: components["schemas"]["ClothInfo"][];
            };
        };
        WeatherClothResponseDto: {
            weatherInfo: components["schemas"]["WeatherInfoDto"];
            clothList: components["schemas"]["CategoryClothDto"][];
        };
        RsDataVoid: {
            resultCode: string;
            msg: string;
            data: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReviewDetailDto"];
                };
            };
        };
    };
    modifyReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyReviewReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewDto"];
                };
            };
        };
    };
    deleteReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewDto"];
                };
            };
        };
    };
    getReviews: {
        parameters: {
            query?: {
                location?: string;
                date?: string;
                feelsLikeTemperature?: number;
                month?: number;
                email?: string;
                page?: number;
                pageSize?: number;
                sort?: "ID" | "ID_ASC" | "EMAIL" | "EMAIL_ASC" | "DATE" | "DATE_ASC" | "LOCATION" | "LOCATION_ASC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageDtoReviewDto"];
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReviewReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewDto"];
                };
            };
        };
    };
    verifyPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyPasswordReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataBoolean"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberJoinReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataMemberDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberLoginReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataMemberLoginResBody"];
                };
            };
        };
    };
    getWeeklyWeather: {
        parameters: {
            query: {
                location?: string;
                lat: number;
                lon: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"][];
                };
            };
        };
    };
    getWeatherByDate: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path: {
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"];
                };
            };
        };
    };
    getWeatherByLocation: {
        parameters: {
            query: {
                location: string;
                lat: number;
                lon: number;
                start: string;
                end: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherInfoDto"][];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberWithUserIdDto"];
                };
            };
        };
    };
    getGeoLocations: {
        parameters: {
            query: {
                location: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GeoLocationDto"][];
                };
            };
        };
    };
    getOutfitWithPeriod: {
        parameters: {
            query: {
                latitude: number;
                longitude: number;
                location: string;
                startDate: string;
                endDate: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OutfitRecommendationResponseDto"];
                };
            };
        };
    };
    getClothDetails: {
        parameters: {
            query: {
                latitude: number;
                longitude: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WeatherClothResponseDto"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}
